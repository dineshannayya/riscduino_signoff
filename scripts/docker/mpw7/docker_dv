#
# RISC-V Dockerfile
#
# https://github.com/sbates130272/docker-riscv
#
# This Dockerfile creates a container full of lots of useful tools for
# RISC-V development. See associated README.md for more
# information. This Dockerfile is mostly based on the instructions
# found at https://github.com/riscv/riscv-tools.

# Pull base image (use Wily for now).
FROM ubuntu:20.04


ENV TZ=Europe/Kiev
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install some base tools that we will need to get the risc-v
# toolchain working.
RUN apt-get update && apt-get install -y \
  autoconf \
  automake \
  autotools-dev \
  python3 \
  bc \
  bison \
  build-essential \
  curl \
  flex \
  gawk \
  git \
  gperf \
  libmpc-dev \
  libmpfr-dev \
  libgmp-dev \
  libtool \
  ncurses-dev \
  patchutils \
  squashfs-tools \
  zlib1g-dev \
  libexpat-dev \
  texinfo

RUN git clone https://github.com/steveicarus/iverilog.git &&\
     cd  iverilog &&\
     sh autoconf.sh &&\
     ./configure &&\
     make install &&\
     cd  &&\
     rm -rf iverilog

RUN apt-get --assume-yes install libc6-dev-i386
RUN apt-get --assume-yes install g++-multilib
RUN apt-get --assume-yes install libmpc-dev


########################################################################################################################
## There is Issue in doing below function inside the docker as total compile time is more tha 2.5 hour, docker is hanging
# So we have clone locally and upto "git submodule update --init --recursive" and in the interactive command prompt. then
# below command are executed
# 1. Go to local riscv clone folder
#    /home/dinesha/workarea/tools/source/riscv-gnu-toolchain-rv64i
# 2. Make sure the previous build is clean
#    make clean
# 3. run the docker prompt command with project directory pointing to local riscv folder
#    docker run -it --rm -v $(pwd):/project -v $PDK_ROOT:$PDK_ROOT -e PDK_ROOT=$PDK_ROOT -u $(id -u 0):$(id -g 0) dineshannayya/dv_setup:mpw5 sh -c "/bin/bash"
# 4. Following command are executed inside the docker prompt
#    mkdir /opt/riscv64i
#    cd /project
#    cd build
#    ../configure --enable-multilib="rv32i-ilp32--;rv32imafd-ilp32--" --prefix=/opt/riscv64i
#    make 
############################################################################
#RUN mkdir /opt/riscv64i &&\
#     git clone https://github.com/riscv/riscv-gnu-toolchain riscv-gnu-toolchain-rv64i &&\
#     cd riscv-gnu-toolchain-rv64i &&\
#     git checkout 411d134 &&\
#     git submodule update --init --recursive &&\
#     mkdir build; cd build &&\
#     ../configure --enable-multilib="rv32i-ilp32--;rv32imafd-ilp32--" --prefix=/opt/riscv64i && \
#     make  && \
#     cd    && \
#     rm -rf riscv-gnu-toolchain-rv64i


ENV PATH="/opt/riscv64i/bin/:/opt/riscv32i/bin/:$PATH"
ENV DV_ROOT=/dv_root
ENV GCC_PATH=/opt/riscv32i/bin
ENV PDK_ROOT=/opt/pdk
ENV PDK_PATH=/opt/pdk/sky130A
ENV CARAVEL_ROOT=/opt/caravel
ENV CORE_VERILOG_PATH=/opt/caravel/mgmt_core_wrapper/verilog
ENV MCW_ROOT=/opt/caravel/mgmt_core_wrapper
ENV PDK=sky130A
WORKDIR /dv_root
CMD ["/bin/sh" "-c" "/bin/bash"]
